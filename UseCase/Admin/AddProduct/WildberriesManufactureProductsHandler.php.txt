<?php
/*
 *  Copyright 2023.  Baks.dev <admin@baks.dev>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is furnished
 *  to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

declare(strict_types=1);

namespace BaksDev\Wildberries\Manufacture\UseCase\Admin\AddProduct;


use BaksDev\Core\Messenger\MessageDispatchInterface;
use BaksDev\Manufacture\Part\Entity\ManufacturePart;
use BaksDev\Manufacture\Part\Entity\Products\ManufacturePartProduct;
use BaksDev\Manufacture\Part\Messenger\ManufacturePartMessage;
use BaksDev\Manufacture\Part\Repository\OpenManufacturePartByAction\OpenManufacturePartByActionInterface;
use BaksDev\Manufacture\Part\Type\Marketplace\ManufacturePartMarketplace;
use BaksDev\Manufacture\Part\Type\Marketplace\ManufacturePartMarketplace\ManufacturePartMarketplaceSystem;
use BaksDev\Manufacture\Part\UseCase\Admin\NewEdit\ManufacturePartDTO;
use BaksDev\Manufacture\Part\UseCase\Admin\NewEdit\ManufacturePartHandler;
use BaksDev\Products\Product\Entity\Event\ProductEvent;
use BaksDev\Users\UsersTable\Repository\Actions\ActionByCategory\ActionByCategoryInterface;
use BaksDev\Users\UsersTable\Repository\Actions\ActionByProduct\ActionByProductInterface;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

final class WildberriesManufactureProductsHandler
{
    private EntityManagerInterface $entityManager;

    private ValidatorInterface $validator;

    private LoggerInterface $logger;

    private MessageDispatchInterface $messageDispatch;
    private ActionByProductInterface $actionByProduct;
    private ActionByCategoryInterface $actionByCategory;
    private OpenManufacturePartByActionInterface $openManufacturePartByAction;
    private ManufacturePartHandler $ManufacturePartHandler;

    public function __construct(
        EntityManagerInterface $entityManager,
        ValidatorInterface $validator,
        LoggerInterface $logger,
        MessageDispatchInterface $messageDispatch,

        ActionByProductInterface $actionByProduct,
        ActionByCategoryInterface $actionByCategory,
        OpenManufacturePartByActionInterface $openManufacturePartByAction,
        ManufacturePartHandler $ManufacturePartHandler,
    )
    {
        $this->entityManager = $entityManager;
        $this->validator = $validator;
        $this->logger = $logger;
        $this->messageDispatch = $messageDispatch;

        $this->actionByProduct = $actionByProduct;
        $this->actionByCategory = $actionByCategory;
        $this->openManufacturePartByAction = $openManufacturePartByAction;
        $this->ManufacturePartHandler = $ManufacturePartHandler;
    }

    /** @see ManufacturePart */
    public function handle(
        WildberriesManufactureProductsDTO $command,
    ): string|ManufacturePart|ManufacturePartProduct
    {
        /**
         *  Валидация ManufacturePartProductsDTO
         */
        $errors = $this->validator->validate($command);

        if(count($errors) > 0)
        {
            $uniqid = uniqid('', false);
            $errorsString = (string) $errors;
            $this->logger->error($uniqid.': '.$errorsString);
            return $uniqid;
        }


        /** Получаем категорию продукции */
        $ProductEvent = $this->entityManager->getRepository(ProductEvent::class)->find(
            $command->getProduct()
        );

        if(!$ProductEvent->getRootCategory())
        {
            $uniqid = uniqid('', false);
            $errorsString = sprintf(
                'Not found root category %s by product id: %s',
                ProductEvent::class,
                $command->getProduct()
            );
            $this->logger->error($uniqid.': '.$errorsString);

            return $uniqid;
        }

        /** Получаем Индивидуальный способ производства продукции */

        $UsersTableActionsEvent = $this->actionByProduct
            ->findUsersTableActionsByProduct($ProductEvent->getProduct());

        /* Если нет индивидуального способ производства - ищем по категории */
        if(!$UsersTableActionsEvent)
        {
            $UsersTableActionsEvent = $this->actionByCategory
                ->findUsersTableActionsByCategory($ProductEvent->getRootCategory());
        }


        if(!$UsersTableActionsEvent)
        {
            $uniqid = uniqid('', false);
            $errorsString = sprintf(
                'Not found action user table %s (product: %s, root category: %s)',
                ProductEvent::class,
                $ProductEvent->getProduct(),
                $ProductEvent->getRootCategory()
            );
            $this->logger->error($uniqid.': '.$errorsString);

            return $uniqid;
        }

        /** Получаем активную открытую производственную партию */

        $ManufacturePartEvent = $this->openManufacturePartByAction
            ->findManufacturePartEventOrNull($command->getProfile(), $UsersTableActionsEvent);

        /* Если открытой партии нет - открываем */
        if(!$ManufacturePartEvent)
        {
            $ManufacturePartDTO = new ManufacturePartDTO();
            $ManufacturePartDTO
                ->setProfile($command->getProfile())
                ->setMarketplace(new ManufacturePartMarketplace(ManufacturePartMarketplaceSystem::class))
                ->addProduct($command);

            return $this->ManufacturePartHandler->handle($ManufacturePartDTO);
        }

        /**
         * Если имеется открытая партия - добавляем к ней продукт
         */

        $ManufacturePartProduct = new ManufacturePartProduct($ManufacturePartEvent);
        $ManufacturePartProduct->setEntity($command);

        /**
         * Валидация Event
         */
        $errors = $this->validator->validate($ManufacturePartProduct);

        if(count($errors) > 0)
        {
            $uniqid = uniqid('', false);
            $errorsString = (string) $errors;
            $this->logger->error($uniqid.': '.$errorsString);
            return $uniqid;
        }
        
        $this->entityManager->persist($ManufacturePartProduct);
        $this->entityManager->flush();

        /* Отправляем сообщение в шину */
        $this->messageDispatch->dispatch(
            message: new ManufacturePartMessage($ManufacturePartEvent->getMain(), $ManufacturePartEvent->getId()),
            transport: 'manufacture-part'
        );

        // 'manufacture_part_high'
        return $ManufacturePartProduct;
    }
}